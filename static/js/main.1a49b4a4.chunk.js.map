{"version":3,"sources":["components/ProductList.js","api/index.js","App.js","reportWebVitals.js","index.js"],"names":["ProductList","productCategoryData","isLoading","setIsLoading","useState","tableRows","setTableRows","useEffect","rows","map","product","style","textAlign","name","color","join","manufacturer","price","DATAPAYLOAD","id","createList","LoadingInfo","Spinner","animation","width","height","marginTop","ProductTable","Table","responsive","size","productRequest","axios","create","baseURL","headers","Accept","availabilityRequest","handleProductRequests","results","productData","forEach","response","concat","data","availabilityRequests","manufacturers","includes","push","request","get","mergeLists","mergedList","listToBeMerged","object","toLowerCase","has","replace","targetObject","set","Object","assign","type","createCategorizedResult","mergedResult","categorizedResult","jackets","shirts","accessories","fetchProducts","callback","a","productRequests","Promise","all","then","availabilityData","reduce","Map","values","result","ProductTypes","App","isFetchingList","setIsFetchingList","isCreatingList","setIsCreatingList","allProductData","setAllProductData","selectedCategory","setSelectedCategory","handleFetchCallback","setInterval","handleJacketClick","handleShirtClick","handleAccessoriesClick","NavigationBar","Navbar","bg","variant","Brand","Nav","className","Link","onClick","Container","Row","margin","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a49b4a4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Table from 'react-bootstrap/Table';\nimport Spinner from 'react-bootstrap/Spinner';\n\nconst ProductList = ({ productCategoryData, isLoading, setIsLoading }) => {\n  const [tableRows, setTableRows] = useState([]);\n\n  const createList = () => {\n    const rows = productCategoryData.map((product) => (\n      <tr key={product.id}>\n        <td style={{ textAlign: 'left' }}>{product.name}</td>\n        <td>{product.color.join(', ')}</td>\n        <td>{product.manufacturer}</td>\n        <td>{product.price}</td>\n        <td>{product.DATAPAYLOAD}</td>\n      </tr>\n    ));\n    setTableRows(rows);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    createList();\n  }, [productCategoryData]);\n\n  const LoadingInfo = () => (\n    <div>\n      <Spinner\n        animation=\"border\"\n        style={{ width: '10rem', height: '10rem' }}\n      />\n      <h4 style={{ marginTop: '1rem' }}>\n        Creating List...\n      </h4>\n    </div>\n  );\n\n  const ProductTable = () => (\n    <Table responsive size=\"sm\">\n      <thead>\n        <tr>\n          <th style={{ textAlign: 'left' }}>Product name</th>\n          <th>Available colors</th>\n          <th>Manufacturer</th>\n          <th>Price</th>\n          <th>Availability</th>\n        </tr>\n      </thead>\n      <tbody>{tableRows}</tbody>\n    </Table>\n  );\n\n  return (\n    <div style={{ width: '100%' }}>\n      {isLoading\n        ? (<LoadingInfo />)\n        : (<ProductTable />)}\n    </div>\n  );\n};\n\nProductList.propTypes = {\n  productCategoryData: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    color: PropTypes.arrayOf(PropTypes.string).isRequired,\n    manufacturer: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired,\n    DATAPAYLOAD: PropTypes.string.isRequired,\n  })).isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  setIsLoading: PropTypes.func.isRequired,\n};\n\nexport default ProductList;\n","import axios from 'axios';\n\nconst productRequest = axios.create({\n  baseURL: 'https://bad-api-assignment.reaktor.com/products/',\n  headers: { Accept: 'application/json' },\n});\n\nconst availabilityRequest = axios.create({\n  baseURL: 'https://bad-api-assignment.reaktor.com/availability/',\n  headers: { Accept: 'application/json' },\n});\n\nconst handleProductRequests = (results) => {\n  let productData = [];\n  results.forEach((response) => {\n    productData = productData.concat(response.data);\n  });\n\n  const availabilityRequests = [];\n  const manufacturers = [];\n  productData.forEach((product) => {\n    if (\n      typeof product.manufacturer !== 'undefined'\n      && !manufacturers.includes(product.manufacturer)\n    ) {\n      manufacturers.push(product.manufacturer);\n      const request = availabilityRequest.get(product.manufacturer);\n      availabilityRequests.push(request);\n    }\n  });\n\n  return [productData, availabilityRequests];\n};\n\n// merge product and availability data. when using reduce, give products array as first value.\nconst mergeLists = (mergedList, listToBeMerged) => {\n  listToBeMerged.forEach((product) => {\n    const object = product;\n    if (typeof object.id !== 'undefined') {\n      const id = object.id.toLowerCase();\n\n      if (mergedList.has(id)) {\n        if (typeof object.DATAPAYLOAD !== 'undefined') {\n          // clear tags, line breaks and whitespaces.\n          const regex = /<[^>]*>|\\\\n| /g;\n          object.DATAPAYLOAD = object.DATAPAYLOAD.replace(regex, '');\n        }\n\n        const targetObject = mergedList.get(id);\n        mergedList.set(id, Object.assign(targetObject, object));\n      } else if (typeof object.type !== 'undefined') {\n        object.DATAPAYLOAD = 'UNKNOWN';\n        mergedList.set(id, object);\n      }\n    }\n  });\n\n  return mergedList;\n};\n\nconst createCategorizedResult = (mergedResult) => {\n  const categorizedResult = {\n    jackets: [],\n    shirts: [],\n    accessories: [],\n  };\n  mergedResult.forEach((product) => {\n    categorizedResult[product.type].push(product);\n  });\n\n  return categorizedResult;\n};\n\nconst fetchProducts = async (callback) => {\n  // create product requests for each product category.\n  const productTypes = ['jackets', 'shirts', 'accessories'];\n  const productRequests = [];\n  productTypes.forEach((type) => {\n    productRequests.push(productRequest.get(type));\n  });\n\n  // wait for product request results and create availability requests for each manufacturer.\n  const [productData, availabilityRequests] = await Promise.all(\n    productRequests,\n  ).then((results) => handleProductRequests(results));\n\n  // wait for availability request results, then merge and categorize the results.\n  const result = await Promise.all(availabilityRequests).then((results) => {\n    let availabilityData = [];\n    results.forEach((response) => {\n      availabilityData = availabilityData.concat(response.data.response);\n    });\n\n    const mergedResult = [\n      ...[productData, availabilityData]\n        .reduce(mergeLists, new Map())\n        .values(),\n    ];\n\n    return createCategorizedResult(mergedResult);\n  });\n\n  callback(result);\n};\n\nexport default fetchProducts;\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport React, { useState, useEffect } from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Row from 'react-bootstrap/Row';\nimport Spinner from 'react-bootstrap/Spinner';\nimport ProductList from './components/ProductList';\nimport fetchProducts from './api';\n\nconst fetchTimeInterval = 300000;\nconst ProductTypes = {\n  JACKETS: 'Jackets',\n  SHIRTS: 'Shirts',\n  ACCESSORIES: 'Accessories',\n  DEFAULT: 'Jackets',\n};\n\nconst App = () => {\n  const [isFetchingList, setIsFetchingList] = useState(true);\n  const [isCreatingList, setIsCreatingList] = useState(true);\n  const [allProductData, setAllProductData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(ProductTypes.DEFAULT);\n\n  const handleFetchCallback = (result) => {\n    setAllProductData(result);\n    setIsFetchingList(false);\n  };\n\n  useEffect(() => {\n    fetchProducts(handleFetchCallback);\n    setInterval(() => {\n      fetchProducts(handleFetchCallback);\n    }, fetchTimeInterval);\n  }, []);\n\n  const handleJacketClick = () => {\n    if (selectedCategory !== ProductTypes.JACKETS) {\n      setIsCreatingList(true);\n      setSelectedCategory(ProductTypes.JACKETS);\n    }\n  };\n\n  const handleShirtClick = () => {\n    if (selectedCategory !== ProductTypes.SHIRTS) {\n      setIsCreatingList(true);\n      setSelectedCategory(ProductTypes.SHIRTS);\n    }\n  };\n\n  const handleAccessoriesClick = () => {\n    if (selectedCategory !== ProductTypes.ACCESSORIES) {\n      setIsCreatingList(true);\n      setSelectedCategory(ProductTypes.ACCESSORIES);\n    }\n  };\n\n  const NavigationBar = () => (\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand>Bad-Api</Navbar.Brand>\n      <Nav className=\"mr-auto\">\n        <Nav.Link onClick={handleJacketClick}>{ProductTypes.JACKETS}</Nav.Link>\n        <Nav.Link onClick={handleShirtClick}>{ProductTypes.SHIRTS}</Nav.Link>\n        <Nav.Link onClick={handleAccessoriesClick}>{ProductTypes.ACCESSORIES}</Nav.Link>\n      </Nav>\n    </Navbar>\n  );\n\n  const LoadingInfo = () => (\n    <div>\n      <Spinner\n        animation=\"border\"\n        style={{ width: '10rem', height: '10rem' }}\n      />\n      <h4 style={{ marginTop: '1rem' }}>Finding Products...</h4>\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <NavigationBar />\n      <Container>\n        <Row className=\"justify-content-center\" style={{ margin: '1rem' }}>\n          <h1>{selectedCategory}</h1>\n        </Row>\n\n        <Row className=\"justify-content-center\">\n          {isFetchingList\n            ? (<LoadingInfo />)\n            : (\n              <ProductList\n                productCategoryData={allProductData[selectedCategory.toLowerCase()]}\n                isLoading={isCreatingList}\n                setIsLoading={setIsCreatingList}\n              />\n            )}\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}