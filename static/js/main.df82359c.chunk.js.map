{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["addr","Content","data","type","loading","Container","Row","className","style","margin","Spinner","animation","width","height","Table","responsive","size","map","product","i","name","color","join","manufacturer","price","DATAPAYLOAD","App","didMount","useRef","useState","setLoading","setData","setType","jackets","setJackets","shirts","setShirts","accessories","setAccesories","useEffect","current","request","setInterval","a","headers","product_requests","forEach","t","push","axios","get","Promise","all","then","results","combined_results","manufacturers","availability_requests","response","concat","e","includes","arr","result","reduce","c","o","id","toLowerCase","has","replace","set","Object","assign","Map","values","j","s","Navbar","bg","variant","Brand","href","Nav","Link","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df82359c.chunk.js","sourcesContent":["import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\n\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Table from 'react-bootstrap/Table'\nimport Spinner from 'react-bootstrap/Spinner'\n\nconst addr = 'https://bad-api-assignment.reaktor.com/'\nconst timeInterval = 300000\n\nfunction App() {\n\n  const didMount = useRef(false)\n  const [loading, setLoading] = useState(true)\n  const [data, setData] = useState([])\n  const [type, setType] = useState('jackets')\n  const [jackets, setJackets] = useState([])\n  const [shirts, setShirts] = useState([])\n  const [accessories, setAccesories] = useState([])\n \n  useEffect(() => {\n    if(!didMount.current) {\n      request()\n      setInterval(request, timeInterval)\n      didMount.current = true\n    } \n  }, [])\n\n  const request = async () => {\n   \n    const headers = { \n      headers: { \n        'Accept': 'application/json'\n      } \n    }\n    const types = ['jackets', 'shirts', 'accessories']\n    const product_requests = []\n    types.forEach(t => {\n      product_requests.push(axios.get(`${addr}products/${t}`, headers))\n    })\n\n    Promise.all(product_requests).then(results => {\n      let combined_results = []\n      let manufacturers = []\n      let availability_requests = []\n\n      // combine product data\n      results.forEach(response => {\n        combined_results = combined_results.concat(response.data)\n      })\n      // create availability requests for each manufacturer\n      combined_results.forEach(e => {\n        if(typeof(e.manufacturer) !== 'undefined'  && !manufacturers.includes(e.manufacturer)){\n          manufacturers.push(e.manufacturer)\n          availability_requests.push(axios.get(`${addr}availability/${e.manufacturer}`, headers))\n        }\n      })\n\n      Promise.all(availability_requests).then(results => {\n        let arr = []\n\n        // combine availability data\n        results.forEach(response => {\n          arr = arr.concat(response.data.response)\n        })\n\n        // merge products and availability\n        let result = [...[combined_results, arr].reduce((a, c) => (\n          c.forEach(o => {\n            if(typeof(o.id) !== 'undefined') {\n              let id = (o.id).toLowerCase()\n              if(a.has(id)) {\n                if(typeof(o.DATAPAYLOAD) !== 'undefined') {\n                  o.DATAPAYLOAD = o.DATAPAYLOAD.replace(/<[^>]*>|\\\\n| /g, '')\n                }\n                a.set(id, Object.assign(a.get(id), o))\n              } else if(typeof(o.type) !== 'undefined') { \n                o.DATAPAYLOAD = 'UNKNOWN'\n                a.set(id, o)\n              }   \n            }\n            \n          }), a\n        ), new Map).values()];\n\n        // seperate result into category arrays for reducing render times when switching category\n        let j = []\n        let s = []\n        let a = []\n        result.forEach(e => {\n          if (e.type === 'jackets') {\n            j.push(e)\n          }\n          else if (e.type === 'shirts') {\n            s.push(e)\n          }\n          else if (e.type === 'accessories') {\n            a.push(e)\n          }\n        })\n        setJackets(j)\n        setShirts(s)\n        setAccesories(a)\n        setData(j)\n        setLoading(false)\n      })\n    })\n  }\n\n  const handleJacketClick = () => {\n    setType(\"Jackets\")\n    setData(jackets)\n  }\n\n  const handleShirtClick = () => {\n    setType(\"Shirts\")\n    setData(shirts)\n  }\n\n  const handleAccessoriesClick = () => {\n    setType(\"Accessories\")\n    setData(accessories)\n  }\n\n  return (\n    <div className=\"App\">\n\n      <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"#home\">Bad-Api</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <Nav.Link onClick={handleJacketClick}>Jackets</Nav.Link>\n            <Nav.Link onClick={handleShirtClick}>Shirts</Nav.Link>\n            <Nav.Link onClick={handleAccessoriesClick}>Accessories</Nav.Link>\n          </Nav>\n      </Navbar>\n\n      <Content data={data} type={type} loading={loading} />\n\n    </div>\n  )\n}\n\nconst Content = ({ data, type, loading }) => {\n\n  const rows = () => {\n    return data.map((product, i) => {\n        return (\n          <tr key={i}>\n            <td>{product.name}</td>\n            <td>{product.color.join(', ')}</td>\n            <td>{product.manufacturer}</td>\n            <td>{product.price}</td>\n            <td>{product.DATAPAYLOAD}</td>\n          </tr>\n        )\n    })\n  }\n\n  return (\n    <Container>\n        <Row className=\"justify-content-center\" style={{margin: \"1rem\"}}> \n          <h1>{type}</h1>\n        </Row>\n        <Row className=\"justify-content-center\">\n        {loading\n        ? <Spinner animation=\"border\" style={{width: \"10rem\", height: \"10rem\"}}/>    \n        : <Table responsive size=\"sm\">\n            <thead>\n              <tr>\n                <th>Product name</th>\n                <th>Available colors</th>\n                <th>Manufacturer</th>\n                <th>Price</th>\n                <th>Availability</th>\n              </tr>\n            </thead>\n            <tbody>{rows()}</tbody>\n          </Table>        \n        }\n        </Row>\n      </Container>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}