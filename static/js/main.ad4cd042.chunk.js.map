{"version":3,"sources":["components/ProductList.js","api/index.js","App.js","reportWebVitals.js","index.js"],"names":["ProductList","productCategoryData","isLoading","setIsLoading","useState","data","setData","useEffect","products","map","product","style","textAlign","name","color","join","manufacturer","price","DATAPAYLOAD","id","createList","width","Spinner","animation","height","marginTop","Table","responsive","size","productRequest","axios","create","baseURL","headers","Accept","availabilityRequest","handleProductRequests","results","productData","forEach","response","concat","availabilityRequests","manufacturers","includes","push","request","get","mergeLists","mergedList","listToBeMerged","object","toLowerCase","has","replace","targetObject","set","Object","assign","type","createCategorizedResult","mergedResult","categorizedResult","jackets","shirts","accessories","fetchProducts","callback","a","productRequests","Promise","all","then","availabilityData","reduce","Map","values","result","ProductTypes","App","isFetchingList","setIsFetchingList","isCreatingList","setIsCreatingList","allProductData","setAllProductData","selectedCategory","setSelectedCategory","handleFetchCallback","setInterval","className","Navbar","bg","variant","Brand","Nav","Link","onClick","Container","Row","margin","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad4cd042.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Table from 'react-bootstrap/Table';\nimport Spinner from 'react-bootstrap/Spinner';\n\nconst ProductList = ({ productCategoryData, isLoading, setIsLoading }) => {\n  const [data, setData] = useState([]);\n\n  const createList = () => {\n    const products = productCategoryData.map((product) => (\n      <tr key={product.id}>\n        <td style={{ textAlign: 'left' }}>{product.name}</td>\n        <td>{product.color.join(', ')}</td>\n        <td>{product.manufacturer}</td>\n        <td>{product.price}</td>\n        <td>{product.DATAPAYLOAD}</td>\n      </tr>\n    ));\n    setData(products);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    createList();\n  }, [productCategoryData]);\n\n  return (\n    <div style={{ width: '100%' }}>\n      {isLoading ? (\n        <div>\n          <Spinner\n            animation=\"border\"\n            style={{ width: '10rem', height: '10rem' }}\n          />\n          <h4 style={{ marginTop: '1rem' }}>\n            Creating List...\n          </h4>\n        </div>\n      )\n        : (\n          <Table responsive size=\"sm\">\n            <thead>\n              <tr>\n                <th style={{ textAlign: 'left' }}>Product name</th>\n                <th>Available colors</th>\n                <th>Manufacturer</th>\n                <th>Price</th>\n                <th>Availability</th>\n              </tr>\n            </thead>\n            <tbody>{data}</tbody>\n          </Table>\n        )}\n    </div>\n\n  );\n};\n\nProductList.propTypes = {\n  productCategoryData: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    color: PropTypes.arrayOf(PropTypes.string).isRequired,\n    manufacturer: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired,\n    DATAPAYLOAD: PropTypes.string.isRequired,\n  })).isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  setIsLoading: PropTypes.func.isRequired,\n};\n\nexport default ProductList;\n","import axios from 'axios';\n\nconst productRequest = axios.create({\n  baseURL: 'https://bad-api-assignment.reaktor.com/products/',\n  headers: { Accept: 'application/json' },\n});\n\nconst availabilityRequest = axios.create({\n  baseURL: 'https://bad-api-assignment.reaktor.com/availability/',\n  headers: { Accept: 'application/json' },\n});\n\nconst handleProductRequests = (results) => {\n  let productData = [];\n  results.forEach((response) => {\n    productData = productData.concat(response.data);\n  });\n\n  const availabilityRequests = [];\n  const manufacturers = [];\n  productData.forEach((product) => {\n    if (\n      typeof product.manufacturer !== 'undefined'\n      && !manufacturers.includes(product.manufacturer)\n    ) {\n      manufacturers.push(product.manufacturer);\n      const request = availabilityRequest.get(product.manufacturer);\n      availabilityRequests.push(request);\n    }\n  });\n\n  return [productData, availabilityRequests];\n};\n\n// merge product and availability data. when using reduce, give products array as first value.\nconst mergeLists = (mergedList, listToBeMerged) => {\n  listToBeMerged.forEach((product) => {\n    const object = product;\n    if (typeof object.id !== 'undefined') {\n      const id = object.id.toLowerCase();\n\n      if (mergedList.has(id)) {\n        if (typeof object.DATAPAYLOAD !== 'undefined') {\n          // clear tags, line breaks and whitespaces.\n          const regex = /<[^>]*>|\\\\n| /g;\n          object.DATAPAYLOAD = object.DATAPAYLOAD.replace(regex, '');\n        }\n\n        const targetObject = mergedList.get(id);\n        mergedList.set(id, Object.assign(targetObject, object));\n      } else if (typeof object.type !== 'undefined') {\n        object.DATAPAYLOAD = 'UNKNOWN';\n        mergedList.set(id, object);\n      }\n    }\n  });\n\n  return mergedList;\n};\n\nconst createCategorizedResult = (mergedResult) => {\n  const categorizedResult = {\n    jackets: [],\n    shirts: [],\n    accessories: [],\n  };\n  mergedResult.forEach((product) => {\n    categorizedResult[product.type].push(product);\n  });\n\n  return categorizedResult;\n};\n\nconst fetchProducts = async (callback) => {\n  // create product requests for each product category.\n  const productTypes = ['jackets', 'shirts', 'accessories'];\n  const productRequests = [];\n  productTypes.forEach((type) => {\n    productRequests.push(productRequest.get(type));\n  });\n\n  // wait for product request results and create availability requests for each manufacturer.\n  const [productData, availabilityRequests] = await Promise.all(\n    productRequests,\n  ).then((results) => handleProductRequests(results));\n\n  // wait for availability request results, then merge and categorize the results.\n  const result = await Promise.all(availabilityRequests).then((results) => {\n    let availabilityData = [];\n    results.forEach((response) => {\n      availabilityData = availabilityData.concat(response.data.response);\n    });\n\n    const mergedResult = [\n      ...[productData, availabilityData]\n        .reduce(mergeLists, new Map())\n        .values(),\n    ];\n\n    return createCategorizedResult(mergedResult);\n  });\n\n  callback(result);\n};\n\nexport default fetchProducts;\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport React, { useState, useEffect } from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Row from 'react-bootstrap/Row';\nimport Spinner from 'react-bootstrap/Spinner';\nimport ProductList from './components/ProductList';\nimport fetchProducts from './api';\n\nconst fetchTimeInterval = 300000;\nconst ProductTypes = {\n  JACKETS: 'Jackets',\n  SHIRTS: 'Shirts',\n  ACCESSORIES: 'Accessories',\n  DEFAULT: 'Jackets',\n};\n\nconst App = () => {\n  const [isFetchingList, setIsFetchingList] = useState(true);\n  const [isCreatingList, setIsCreatingList] = useState(true);\n  const [allProductData, setAllProductData] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(ProductTypes.DEFAULT);\n\n  const handleFetchCallback = (result) => {\n    setAllProductData(result);\n    setIsFetchingList(false);\n  };\n\n  useEffect(() => {\n    fetchProducts(handleFetchCallback);\n    setInterval(() => {\n      fetchProducts(handleFetchCallback);\n    }, fetchTimeInterval);\n  }, []);\n\n  const handleJacketClick = () => {\n    if (selectedCategory !== ProductTypes.JACKETS) {\n      setIsCreatingList(true);\n      setSelectedCategory(ProductTypes.JACKETS);\n    }\n  };\n\n  const handleShirtClick = () => {\n    if (selectedCategory !== ProductTypes.SHIRTS) {\n      setIsCreatingList(true);\n      setSelectedCategory(ProductTypes.SHIRTS);\n    }\n  };\n\n  const handleAccessoriesClick = () => {\n    if (selectedCategory !== ProductTypes.ACCESSORIES) {\n      setIsCreatingList(true);\n      setSelectedCategory(ProductTypes.ACCESSORIES);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand>Bad-Api</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link onClick={handleJacketClick}>{ProductTypes.JACKETS}</Nav.Link>\n          <Nav.Link onClick={handleShirtClick}>{ProductTypes.SHIRTS}</Nav.Link>\n          <Nav.Link onClick={handleAccessoriesClick}>{ProductTypes.ACCESSORIES}</Nav.Link>\n        </Nav>\n      </Navbar>\n\n      <Container>\n        <Row className=\"justify-content-center\" style={{ margin: '1rem' }}>\n          <h1>{selectedCategory}</h1>\n        </Row>\n\n        <Row className=\"justify-content-center\">\n          {isFetchingList ? (\n            <div>\n              <Spinner\n                animation=\"border\"\n                style={{ width: '10rem', height: '10rem' }}\n              />\n              <h4 style={{ marginTop: '1rem' }}>Finding Products...</h4>\n            </div>\n          ) : (\n            <ProductList\n              productCategoryData={allProductData[selectedCategory.toLowerCase()]}\n              isLoading={isCreatingList}\n              setIsLoading={setIsCreatingList}\n            />\n          )}\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}